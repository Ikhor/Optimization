Novel Exact and Heuristic Algorithms for theMinimum Cost Linear Extension ProblemT. O. Bonates P. C. Linhares L. F. S. Oliveira L. V. A. OliveiraAbstractWe present a computational evaluation of existing and novel approaches for the so-called Minimum Cost Linear Extension problem (MCLE). Given a partially ordered setPand a cost function that associates a non-negative real value with every (ordered)pair of incomparable elements ofP, the MCLE asks for some linear extensionLofPthat minimizes the total cost of adjacent elements inL. We discuss an algorithm byLiuet al.for the general case of the MCLE, showing that it is not an approximationalgorithm, as originally suggested. We also propose a fast and effective topologicalsorting-based heuristic, as well as an exact model based on constraint programming.Computational results suggest that the topological sorting heuristic is superior to thealgorithm of Liuet al.for sparse instances, while the exact model shows that Liuetal.’s algorithm produces near-optimal solutions for small-sized instances.1 IntroductionA partially ordered set (or simply, aposet) is a pairP= (E,=), whereEis a finite setand=is a binary relation onEthat is transitive, reflexive and antisymmetric,i.e.,=is abinary relation satisfying:(i)x=y, y=z?x=z,?x, y, z?E;(ii)x=x,?x?E;(iii)x=y, y=x?x=y,?x, y?E.In a partial orderP= (E,=) there might exist pairs of elementsx, y?E, withx6=y,such that we have neitherx=ynory=xinP. Two elementsx, yof a posetPare said tobecomparableifx=yory=xinP; otherwise, they are said to beincomparable, which isdenoted byx~y. We say thatycoversxinPifx < yand if there is no elementzinPsatisfyingx < z < y. We denote the fact thatycoversxbyx <·y. For any elementxinP, we definex?as the subset ofEgiven byx?={z?E:z=x}.TheHasse diagramof a finite posetPis a directed graph whose vertices are the elementsofPand the arcs are the coverage relations inP. AchaininPis a subsetC?Esuch that
any two elements ofCare comparable inP. A linear order is an ordered setL= (E,=L)satisfyingx=Lyory=Lxfor every pair of elementsx, y?E. A linear orderLis a linearextension of a posetPifx=Lywheneverx=yemP.Is is a well-known fact that every poset admits at least one linear extension. Considera linear extensionLof posetP. We will writeL={x1<Lx2<L. . . <Lxn},wherexi?E(i= 1, . . . , n) andn=|E|. Since it is possible for a poset to admit morethan one linear extension, it is natural to consider an optimization problem that asks forthe best linear extension of a posetP, according to some criterion.1.1 The Minimum Cost Linear Extension ProblemLetc:E×E?R+be a cost function that associates a non-negative real value with everypairx, y?P, while satisfying the following conditions:???c(x, y) = 0,ifx=y;0< c(x, y)<+8,ifx~y;c(x, y) = +8,ifx > y.(1)By slightly abusing notation, we will write the total cost of a linear extensionL={x1<Lx2<L. . . <Lxn}asc(L) =nX-1i=ic(xi, xi+1) (2)Given a posetPand a cost functioncas described above, the Minimum Cost LinearExtension problem (thereby referred to as MCLE) asks for a linear extensionLofPwhichminimizes (2). In other words, we are interested in findingL*satisfyingL*= arg min{c(L) :Lis a linear extension ofP}.The MCLE was originally defined in [4] and further studied in [5]. In [4] the authorsshowed that the MCLE generalizes the so-called bump number and jump number problemson posets. Specifically, if we definec(x, y) = 1, forx~y, the problem becomes equivalentto the jump number problem. Since the jump number problem is known to be NP-hard(see [2]), the MCLE is also NP-hard. In this work, however, we concentrate on the generalversion of the problem, in whichPis an arbitrary poset andcis an arbitrary non-negativereal-valued cost function satisfying conditions (1).While discussing the algorithms described in this work, we shall assume that the compu-tational representation of a posetP= (E,=) is that of a directed graph, in which verticescorrespond to elements ofEand arcs are associated with a superset of the coverage re-lations inP. Formally, this representation is a directed graphG= (V, A), withV=EandA={(x, y) :x, y?E, x < y}. We do not insist that only arcs corresponding tocoverage relations are included in this representation, since this does not have an impacton the worst-case time complexity of the algorithms discussed here. We shall make use of
the notationd+(v) to denote the outward neighborhood of vertexv,i.e., the set of verticesdirectly reachable fromv. Similarly,d-(v) will be utilized to denote the inward neighbor-hood of vertexv: the set of all verticeswfor which there exists an arc (w, v)?A. Weshall refer to|d+(v)|as theout-degreeof vertexv, while|d-(v)|shall be referred to as thein-degreeofv.2 Algorithm 2 of Liuet al.In what folows we describe the greedy algorithm proposed by Liuet al.in [4], referred toas “Algorithm 2” in their paper. Here we provide a somewhat different description thanthe one given in the original paper. The reason for that is that we believe our descriptionfocus more closely on the conceptual steps, rather than on implementation choices.For the sake of simplifying the presentation of algorithmLiu2, we shall define theoperation ofinjectingan element into apartial linear extensionof a posetP. We define apartial linear extension of a posetP= (E,=) as a linear orderL= (X,=L) involving asubsetXofEand satisfyingx=Ly, wheneverx=yinP. LetLbe a partial linear orderofPandx?E\L. The operation of injectingxintoLcorresponds to augmenting thelinear orderLby addingxto it, while satisfying the following conditions:(i)The resulting linear orderL0is consistent withP(i.e.,x=L0ywheneverx=yinP);(ii)c(L0) is minimum.In other words, we want to addxintoLwhile preserving the relative order of theelements inLand minimizing the resulting total cost ofL0. Let (y1, . . . , y|L|) be the elementsofL, whereyi<Lyi+1, i= 1, . . . ,|L|-1. Then, the choices for positioningxwhen injectingit intoLare the following:{x, y1, . . . , y|L|},{y1, . . . , y|L|, x},or{y1, . . . , yi, x, yi+1, . . . , y|L|}, i= 1, . . . ,|L| -1.Obviously, some of these positions might be invalid, as they might not be consistent withthe order relations inP. We present in Figure 1 the pseudocode for algorithmLiu2.It is interesting to note that theLiu2algorithm was presented in [4] as a “greedyapproximation algorithm.” We believe that the authors meant by it that the algorithm is agreedy procedure that produces solutions whose objective function values are typically (butnot provably) close to the optimal value, what is a departure from the standard concept ofan approximation algorithm. Indeed, as we argue below, it is possible to devise examplesfor which the solution produced by the algorithm is arbitrarily large (in terms of objectivefunction value), as compared to the actual minimum.Proposition 2.1TheLiu2algorithm does not have a fixed approximation rate.
AlgorithmLiu2Input:Cover graphGof a posetP= (E,=) of heightT.Output:Linear extensionLofP.1.LetCbe a maximum-size chain ofP2.LetL:=C,R:=E\C3. whileR6=Ødo4.Selectr?R,R:=R\ {r}5.InjectrintoL6. endFigure 1: Pseudocode for algorithmLiu2.ProofConsider the posetPconsisting of a 4-element ground setE={a, b, c, d}and thesingle relationb < a. Let the costs between the incomparable elements inPbe as follows:c(a, c) =M, c(a, d) =M,c(b, c) = 1, c(b, d) = 1,c(c, a) = 2, c(c, b) =M, c(c, d) =M,c(d, a) =M, c(d, b) =M, c(d, c) =M,whereMis a positive constant strictly greater than 1.(a) Solution produced by al-gorithmLiu2; cost = 1+M.(b) Solution produced by al-gorithmLiu2; cost = 1+M.(c) Optimal solution;cost = 3.Figure 2: Two suboptimal solutions produced by algorithmLiu2, and the correspondingoptimal solution.The application of algorithmLiu2toPyields a linear extension with total cost 1 +M.Figure 2(a) and 2(b) show two such linear extensions. Yet another alternative solutionwith the same cost would bea?b?d?c. Which solution is to be reported by